#graphql
type User {
    id: ID!
    cedula: String!
    name: String!
    email: String!
    userType: UserType!
    gender: String
    address: Address
    companyDetails: CompanyDetails
}

enum UserType {
    jobSeeker
    employer
}

type Address {
    canton: Canton!
    details: String
}

enum Canton {
    Puntarenas
    Esparza
    Monte_de_Oro
}

type CompanyDetails {
    companyName: String
    companyType: String
}

type Profession {
    id: ID!
    name: String!
    description: String
}

type JobSeekerProfile {
    id: ID!
    user: User!
    professions: [Profession!]!
    education: [Education!]
    experience: [Experience!]
    skills: [String!]
}

type Education {
    degree: String!
    institution: String!
    year: Int!
}

type Experience {
    company: String!
    position: String!
    startDate: String!
    endDate: String
}

type JobListing {
    id: ID!
    employer: User!
    title: String!
    description: String!
    profession: Profession!
    requirements: [String!]
    salary: Salary
    postedDate: String!
    expirationDate: String
    status: JobListingStatus!
}

type Salary {
    min: Int
    max: Int
}

enum JobListingStatus {
    open
    closed
    filled
}

type Application {
    id: ID!
    jobSeeker: User!
    jobListing: JobListing!
    applicationDate: String!
    status: ApplicationStatus!
}

enum ApplicationStatus {
    pending
    reviewed
    accepted
    rejected
}

type Query {
    getUser(id: ID!): User
    getAllUsers: [User!]!
    getJobSeekerProfile(userId: ID!): JobSeekerProfile
    getJobListing(id: ID!): JobListing
    getAllJobListings: [JobListing!]!
    getApplicationsForJobListing(jobListingId: ID!): [Application!]!
    getApplicationsForJobSeeker(jobSeekerId: ID!): [Application!]!
    getProfessionalsForArea(professionId: ID!): [JobSeekerProfile!]!
    getProfessionalCountByArea: [ProfessionCount!]!
    getProfessionalCountByGender: GenderCount!
}

type ProfessionCount {
    profession: Profession!
    count: Int!
    percentage: Float!
}

type GenderCount {
    male: Int!
    female: Int!
    other: Int!
}

type Mutation {
    createUser(input: CreateUserInput!): User!
    createJobSeekerProfile(input: CreateJobSeekerProfileInput!): JobSeekerProfile!
    createJobListing(input: CreateJobListingInput!): JobListing!
    applyForJob(jobSeekerId: ID!, jobListingId: ID!): Application!
    updateJobListingStatus(id: ID!, status: JobListingStatus!): JobListing!
}

input CreateUserInput {
    cedula: String!
    name: String!
    email: String!
    userType: UserType!
    gender: String
    address: AddressInput
    companyDetails: CompanyDetailsInput
}

input AddressInput {
    canton: Canton!
    details: String
}

input CompanyDetailsInput {
    companyName: String
    companyType: String
}

input CreateJobSeekerProfileInput {
    userId: ID!
    professions: [ID!]!
    education: [EducationInput!]
    experience: [ExperienceInput!]
    skills: [String!]
}

input EducationInput {
    degree: String!
    institution: String!
    year: Int!
}

input ExperienceInput {
    company: String!
    position: String!
    startDate: String!
    endDate: String
}

input CreateJobListingInput {
    employerId: ID!
    title: String!
    description: String!
    professionId: ID!
    requirements: [String!]
    salary: SalaryInput
    expirationDate: String
}

input SalaryInput {
    min: Int
    max: Int
}
